[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "ConnectInnova"
version = "1.0.0"
description = "Backend API for ConnectInnova platform"
readme = "README.md"
authors = [
    {name = "Luiz Eduardo", email = "luizefsilva2@gmail.com"},
]
requires-python = ">=3.12"
dependencies = [
    "requests>=2.32.3",
    "pymongo>=4.13.0",
    "fastapi[standard]>=0.115.12",
    "python-multipart>=0.0.20",
    "motor>=3.7.1",
    "pydantic>=2.11.4",
    "email-validator>=2.2.0",
    "python-jose>=3.4.0",
    "passlib>=1.7.4",
    "bcrypt>=4.3.0",
    "beanie>=1.29.0",
    "python-dotenv>=1.1.0",
    "fastapi-sso>=0.18.0",
    "pydantic-settings>=2.9.1",
    "taskipy>=1.14.1",
    "pytest>=8.4.2",
    "black>=25.1.0",
    "asgi-lifespan>=2.1.0",
]

[project.urls]
"Homepage" = "https://github.com/alanabclins/ConnectInnova.git#readme"
"Repository" = "https://github.com/alanabclins/ConnectInnova.git"

[dependency-groups]
dev = [
    "asgi-lifespan>=2.1.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "taskipy>=1.14.1",
]


[tool.black]
line_length = 94
target_version = ['py312']

[tool.ruff]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
]
src = ["app", "tests"]
line-length = 94

[tool.ruff.lint]
ignore = []
select = [
    "A",
    "I",
    "PL",
    "E",
    "F",
    "W",
    "I001",
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.isort]
known_first_party = ["app"]

[tool.mypy]
files = ["app", "tests"]
disable_error_code = ["import-untyped"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::UserWarning",
    'ignore::DeprecationWarning',
]

[tool.taskipy.tasks]
run = "uv run fastapi dev app/main.py"

pre_test = 'task lint'
test = 'uv run pytest --cov=app --cov-report=term-missing -vv'
post_test = 'coverage html'

lint = 'ruff check . & ruff check . --diff'
format = 'black . && ruff check . --fix && ruff format'
